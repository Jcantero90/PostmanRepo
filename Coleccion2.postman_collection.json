{
	"info": {
		"_postman_id": "578e383a-16b1-4dcf-a800-a40c11ece762",
		"name": "Coleccion2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24556956"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"  \"schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"body\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"userId\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"title\",",
							"    \"body\",",
							"    \"userId\"",
							"  ]",
							"}",
							"",
							"pm.test(\"Validando el esquema\",()=>{",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code 200 or 201\", function () {",
							"if (pm.request.method == \"POST\") {",
							"pm.expect(pm.response.code).to.be.oneOf([200, 201])",
							"} else {",
							"pm.response.to.have.status(200);",
							"}",
							"});",
							"",
							"pm.test(\"Response time is less than 400ms\", function (){",
							"    pm.expect(pm.response.responseTime).to.be.below(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validando el esquema\",()=>{\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.test(\"Status code 200 or 201\", function () {\r",
							"if (pm.request.method == \"POST\") {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200, 201])\r",
							"} else {\r",
							"pm.response.to.have.status(200);\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 101,\r\n  \"title\": \"foo\",\r\n  \"body\": \"bar\",\r\n  \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validando el esquema\",()=>{\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.test(\"Status code 200 or 201\", function () {\r",
							"if (pm.request.method == \"POST\") {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200, 201])\r",
							"} else {\r",
							"pm.response.to.have.status(200);\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 101,\r\n  \"title\": \"foo\",\r\n  \"body\": \"bar\",\r\n  \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"body\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"body\",\r",
							"    \"userId\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validando el esquema\",()=>{\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.test(\"Status code 200 or 201\", function () {\r",
							"if (pm.request.method == \"POST\") {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200, 201])\r",
							"} else {\r",
							"pm.response.to.have.status(200);\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code 200 or 201\", function () {",
					"if (pm.request.method == \"POST\") {",
					"pm.expect(pm.response.code).to.be.oneOf([200, 201])",
					"} else {",
					"pm.response.to.have.status(200);",
					"}",
					"});",
					"",
					"pm.test(\"Response time is less than 400ms\", function (){",
					"    pm.expect(pm.response.responseTime).to.be.below(400);",
					"});"
				]
			}
		}
	]
}